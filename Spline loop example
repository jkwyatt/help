import xarray as xr
!pip install netcdf4

import matplotlib.pyplot as plt
import numpy as np

# Let's make our plots pretty
import seaborn as sns
sns.set()

!pip install windrose
from windrose import WindroseAxes

import gsw 

!pip install argopy
import argopy

import scipy.interpolate as inter

#create dataset 
from argopy import DataFetcher as ArgoDataFetcher
fetcher = ArgoDataFetcher(src='argovis').region([125, 130, -45, -30, 0, 2000, '2007', '2020'])
ds = fetcher.to_xarray()
ds

#change from points to actual depth profiles 
ds_profiles = ds.argo.point2profile()
print(ds_profiles)
ds=ds_profiles
ds

# add in teos10 variables
p=ds.PRES
lat=ds.LATITUDE
lon=ds.LONGITUDE

from gsw import SA_from_SP, CT_from_t, geo_strf_dyn_height

SA=SA_from_SP(ds.PSAL, p, lon, lat)
CT=CT_from_t(SA,ds.TEMP,p)

p_ref=0
ds_dynh=geo_strf_dyn_height(SA, CT, p, p_ref, axis=1)
dynh=-ds_dynh

dynh = xr.DataArray(dynh, dims = ["N_PROF", "N_LEVELS"], coords = dict(N_PROF = (["N_PROF"], SA.N_PROF.data),
                                                                       N_LEVELS = (["N_LEVELS"], SA.N_LEVELS.data),
                                                                       TIME = (["N_PROF"], SA.TIME.data), 
                                                                      LATITUDE = (["N_PROF"], SA.LATITUDE.data),
                                                                      LONGITUDE = (["N_PROF"], SA.LONGITUDE.data)))
CT = xr.DataArray(CT, dims = ["N_PROF", "N_LEVELS"], coords = dict(N_PROF = (["N_PROF"], SA.N_PROF.data),
                                                                       N_LEVELS = (["N_LEVELS"], SA.N_LEVELS.data),
                                                                       TIME = (["N_PROF"], SA.TIME.data), 
                                                                      LATITUDE = (["N_PROF"], SA.LATITUDE.data),
                                                                      LONGITUDE = (["N_PROF"], SA.LONGITUDE.data)))
SA = xr.DataArray(SA, dims = ["N_PROF", "N_LEVELS"], coords = dict(N_PROF = (["N_PROF"], SA.N_PROF.data),
                                                                       N_LEVELS = (["N_LEVELS"], SA.N_LEVELS.data),
                                                                       TIME = (["N_PROF"], SA.TIME.data), 
                                                                      LATITUDE = (["N_PROF"], SA.LATITUDE.data),
                                                                      LONGITUDE = (["N_PROF"], SA.LONGITUDE.data)))


#dynamic height contours
from gsw import grav
g=grav(lat,p)
g
dyn_m=xr.DataArray(dynh/g, dims = ["N_PROF", "N_LEVELS"], coords = dict(N_PROF = (["N_PROF"], SA.N_PROF.data),
                                                                       N_LEVELS = (["N_LEVELS"], SA.N_LEVELS.data),
                                                                       TIME = (["N_PROF"], SA.TIME.data), 
                                                                      LATITUDE = (["N_PROF"], SA.LATITUDE.data),
                                                                      LONGITUDE = (["N_PROF"], SA.LONGITUDE.data)))


#interpolate onto constantly increasing pressure grid
ds_interp=ds.argo.interp_std_levels([0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550,560,570,580,590,600,610,620,630,640,650,660,670,680,690,700,710,720,730,740,750,760,770,780,790,800,810,820,830,840,850,860,870,880,890,900,910,920,930,940,950,960,970,980,990,1000,1010,1020,1030,1040,1050,1060,1070,1080,1090,1100,1110,1120,1130,1140,1150,1160,1170,1180,1190,1200,1210,1220,1230,1240,1250,1260,1270,1280,1290,1300,1310,1320,1330,1340,1350,1360,1370,1380,1390,1400,1410,1420,1430,1440,1450,1460,1470,1480,1490,1500,1510,1520,1530,1540,1550,1560,1570,1580,1590,1600,1610,1620,1630,1640,1650,1660,1670,1680,1690,1700,1710,1720,1730,1740,1750,1760,1770,1780,1790,1800,1810,1820,1830,1840,1850,1860,1870,1880,1890,1900,1910,1920,1930,1940,1950,1960,1970,1980,1990])
ds_interp

#filter the data for the STF
filtered_SA=ds_interp.SA.where(~(ds_interp.SA.sel(PRES_INTERPOLATED=200)>35))

filtered_CT=ds_interp.CT.where(~(ds_interp.CT.sel(PRES_INTERPOLATED=200)>12))

#add back to dataset 
ds_interp['filtered_CT'] = filtered_CT
ds_interp['filtered_SA'] = filtered_SA

#filter the dataset where there are NaN's
ds_filter=ds_interp.dropna('N_PROF',how='any')


#Now we want to create a spline of CT vs Dyn_m(1900) at each pressure level, and then get a new variable which is called CT_GEM
#So, to create a spline: 
#At every pressure level, it is compared to dyn height at 1900 
filtered_dynm_1900=ds_filter.dyn_m.sel(PRES_INTERPOLATED=1900)
x=np.array(filtered_dynm_1900)
x=x.flatten()
idx = np.argsort(x) #get the indexes where the dynamic height values are to remain in 'order' 
x2=x[idx]

spline_x_coord=x2

#things that need to change for each pressure level 
#to create the spline we have to get the index from the dynm_1900 data so the data is still configured correctly
#eg:
fil_temp_100=ds_filter.CT.sel(PRES_INTERPOLATED=100) #i don't think I need to do this part, as it is already assigned?
fil_temp_100_1=np.array(fil_temp_100).flatten()
fil_temp_100_2 = fil_temp_100_1[idx]

#we then use fil_temp_100_2 as the y coord of the spline 
fit = inter.UnivariateSpline (spline_x_coord, fil_temp_100_2) #create spline 

#Then, use the fit to get the new, interpolated data
#eg:
GEM_t_100=fit(spline_x_coord)
print(GEM_t_100)

#Lets try and set up a loop then


for i in range(0,200):
    SPLINES_1=ds_filter.CT.sel(PRES_INTERPOLATED=10*i) # times 10 to get the actual pressure we want  - This doesn't actually work, doesn't give out a n x 200 array
    SPLINES_2=np.array(SPLINES_1)#.flatten() #not sure whether flatten is required
    #the data should be 1D at individual pressure levels anyway... 
    splines_3 = SPLINES_1[idx] #put the index values from dn_m in to make sure in order 
    fit = inter.UnivariateSpline (spline_x_coord, ds_filter.CT.sel(PRES_INTERPOLATED=10*i)) #this is where we need to be able to step through the pressure, but can't 
    #figure out how it is done
    

GEM_t=fit(spline_x_coord) 
GEM_t.shape #should be n x 200
